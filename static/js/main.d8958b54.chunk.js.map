{"version":3,"sources":["components/rectangle.js","components/konva_wrapper.js","components/info.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Rectangle","_this","this","react_default","a","createElement","ReactKonva","x","props","y","width","height","fill","color","draggable","onClick","handleClick","React","Component","Konva_Wrapper","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","rectangles","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","points","Symbol","iterator","next","done","rectangle","value","Konva","Util","getRandomColor","push","rectangle_Rectangle","x1","y1","x2","y2","err","return","window","innerWidth","innerHeight","area_length","area_height","Info","console","log","values","Main","handleRectangleNameChange","idx","evt","newRectangles","state","map","sidx","returnObject","objectSpread","target","name","setState","handleAddRectangle","concat","length","handleRemoveRectangle","filter","s","handleChangeAbstract","event","defineProperty","handleSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","body","wrap","_context","prev","preventDefault","processing","JSON","stringify","fetch","method","headers","Content-Type","then","response","text","data","parse","stop","_x","apply","arguments","_this2","className","type","onChange","info_Info","onSubmit","renderRectangleInput","konva_wrapper_Konva_Wrapper","bind","App","main_Main","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d8958b54.chunk.js","sourcesContent":["import React from 'react';\nimport {Rect} from 'react-konva';\n\n\nexport default class Rectangle extends React.Component {\n\n    render() {\n        return (\n            <Rect\n                x={this.props.x}\n                y={this.props.y}\n                width={this.props.width}\n                height={this.props.height}\n                fill={this.props.color}\n                draggable={this.props.draggable}\n                onClick={()=> {\n                    this.props.handleClick({\n                        x: this.props.x,\n                        y: this.props.y,\n                        width: this.props.width,\n                        height: this.props.height})}\n                }\n            />\n        )\n    }\n}\n","import React  from 'react';\nimport { Stage, Layer, Text } from 'react-konva';\nimport Rectangle from './rectangle'\nimport Konva from 'konva';\n\n\n\nexport default class Konva_Wrapper extends React.Component {\n\n    constructor(props){\n        super(props);\n    }\n\n\n    render(){\n        let rectangles = [];\n        // Maybe put this in BE and pass rect objects along? If possible instead of sending points.\n        for(let rectangle of this.props.points){\n            let color = Konva.Util.getRandomColor();\n            rectangles.push(\n                <Rectangle\n                    x={rectangle.x1}\n                    y={rectangle.y1}\n                    width={rectangle.x2 - rectangle.x1}\n                    height={rectangle.y2 - rectangle.y1}\n                    color={color}\n                    draggable={true}\n                    handleClick={this.props.handleClick}\n                />\n            )\n        }\n        return (\n            <Stage width={window.innerWidth} height={window.innerHeight}>\n                <Layer>\n                    <Rectangle\n                        x={0}\n                        y={0}\n                        width={this.props.area_length}\n                        height={this.props.area_height}\n                        draggable={false}\n                        color={Konva.Util.getRandomColor()}\n                        handleClick={()=>{}}\n                    />\n                    {rectangles}\n                </Layer>\n            </Stage>\n        )\n    }\n}","import React  from 'react';\n\n\nexport default class Info extends React.Component {\n    render(){\n        console.log('In info')\n        console.log(this.props)\n        return (\n            <div>\n                <p>X:{this.props.values.x}</p>\n                <p>Y:{this.props.values.y}</p>\n                <p>Width:{this.props.values.width}</p>\n                <p>Height:{this.props.values.height}</p>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport Konva_Wrapper from './konva_wrapper'\nimport Info from './info.js'\n\n\nexport default class Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            area_length: '',\n            processing: false,\n            area_height: '',\n            rectangles: [{length: 0, height: 0}],\n            points: [],\n            values : {\n                x : 0,\n                y: 0,\n                width: 0,\n                height: 0\n            }\n        };\n    }\n\n\n    handleRectangleNameChange = idx => evt => {\n        const newRectangles = this.state.rectangles.map((rectangle, sidx) => {\n            if (idx !== sidx) return rectangle;\n            let returnObject = {...rectangle};\n            returnObject[evt.target.name] = evt.target.value;\n            console.log(rectangle)\n            console.log(returnObject)\n            return returnObject\n        });\n\n        this.setState({rectangles: newRectangles});\n    };\n\n\n    handleAddRectangle = () => {\n        this.setState({\n            rectangles: this.state.rectangles.concat([{length: 0, height: 0}])\n        });\n    };\n\n    handleRemoveRectangle = idx => () => {\n        this.setState({\n            rectangles: this.state.rectangles.filter((s, sidx) => idx !== sidx)\n        });\n    };\n\n\n    handleClick(values){\n        console.log('Eureka!')\n        console.log(values)\n        this.setState({values: values})\n    }\n\n\n    renderRectangleInput() {\n        return <div>\n            <h4>Rectangles</h4>\n            <p>Length, height, id:</p>\n            {this.state.rectangles.map((rectangle, idx) => (\n                <div className=\"rectangle\">\n                    <input\n                        type=\"number\"\n                        value={rectangle.length}\n                        name={\"length\"}\n                        onChange={this.handleRectangleNameChange(idx)}\n                    />\n                    <input\n                        type=\"number\"\n                        value={rectangle.height}\n                        name={\"height\"}\n                        onChange={this.handleRectangleNameChange(idx)}\n                    />\n                    <button\n                        type=\"button\"\n                        onClick={this.handleRemoveRectangle(idx)}\n                        className=\"small\"\n                    >\n                        -\n                    </button>\n                </div>\n            ))}\n        </div>\n    }\n\n    handleChangeAbstract = (event) => {\n        this.setState({[event.target.name]: event.target.value});\n    };\n\n    render() {\n        console.log(this.state);\n\n        return (\n            <div>\n                <Info values={this.state.values} />\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Area to fill length:\n                        <input type=\"text\" name=\"area_length\" onChange={this.handleChangeAbstract}/>\n                        Area to fill height:\n                        <input type=\"text\" name=\"area_height\" onChange={this.handleChangeAbstract}/>\n                    </label>\n                    {this.renderRectangleInput()}\n                    <button\n                        type=\"button\"\n                        onClick={this.handleAddRectangle}\n                        className=\"small\"\n                    >\n                        Add Rectangle\n                    </button>\n                    <button>Incorporate</button>\n                </form>\n                <Konva_Wrapper points={this.state.points} area_length={this.state.area_length} area_height={this.state.area_height} handleClick={this.handleClick.bind(this)}/>\n            </div>\n        );\n\n    }\n\n\n    handleSubmit = async e => {\n        e.preventDefault();\n        console.log('Handle submit called');\n        this.setState({processing: true});\n        let body = JSON.stringify({\n            area_length: this.state.area_length,\n            area_height: this.state.area_height,\n            rectangles: this.state.rectangles\n        });\n\n        await fetch('/api/algorithms', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: body,\n        }).then((response) => {\n            response.text().then((text) => {\n                console.log(text);\n                let data = JSON.parse(text);\n                this.setState({points: data})\n                // let data = JSON.parse(text);\n                // console.log(data);\n\n\n                // this.setState({\n                //     tweets: data.tweets,\n                //     meta: data.meta,\n                //     processing: 'f',\n                //     filteredTweets: [],\n                //     filtered: false,\n                //     filterError: null,\n                //     pagination: {\n                //         currentPage: currentPage,\n                //         currentResultsId: data.meta.currentResultsId,\n                //         nextResultsId: data.meta.nextResultsId\n                //\n                //     }\n                // });\n            });\n\n        });\n\n    };\n}\n\n\n\n","import React from 'react';\nimport Main from './components/main.js'\n\n\nfunction App() {\n  return (\n      <div>\n        <Main/>\n      </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}